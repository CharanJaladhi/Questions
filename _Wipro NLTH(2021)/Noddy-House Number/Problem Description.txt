In the city of Toyland there are N houses. Noddy is looking for a piece of land in the city to build his house. He wants to buy the land where he can build the largest possible house. All the houses in the city in a straight line and all of them are given a house number and position of the house from the entry point in the city. Noddy wants to find the house numbers between which he can build the largest house.

Write an algorithm to help Noddy to find the house numbers between which he can build his house

Input
The input to the function/method consists of two arguments
numOfHouse, an integer representing the number of houses
houseList, a list where each element of the list is a list of integers representing the house number and its position respectively

Output
Return a list of two integers in ascending order representing the house number between which the required land is available

Constraints
2<=numOfHouse<=10^6
1<=houseList[i][0]<=numOfHouse
0<=houseList[i][1]<10^6
0<=i<numOfHouse

Note
No two houses will have the same position In case of multiple such answers. return the one with the least distance from the reference point zero
 
Example
Input
numOfHouse = 5
houseList = [[3, 7],[1,9],[2,0],[5,15],[4,30]]
Output
[4,5] 
Explanation 
The largest land area with size 15 is available between the 4 and 5 numbered houses. so the output contains these house numbers in an ascending order 

Helper Description
The following structure is used to represent a boundedarray and is already implemented in the default code (Do not write this definition again in your code)
typedef struct BoundedArray
{
    int size;
    int *arr; 
}boundedarray;

